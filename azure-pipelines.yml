# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  server_npm_cache: "$(Pipeline.Workspace)/.servernpm"
  web_npm_cache: "$(Pipeline.Workspace)/.webnpm"
  archiveName: "app-$(Build.BuildId).zip"

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '14.x'
  displayName: 'Install Node.js'

- script: |
    echo "current directory: $(pwd)"
    ls
    echo "Pipeline.Workspace = $(Pipeline.Workspace)"
    echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
    echo "Build.ArtifactStagingDirectory = $(Build.ArtifactStagingDirectory)"
    echo "Build.StagingDirectory = $(Build.StagingDirectory)"
    echo "Build.Repository.LocalPath = $(Build.Repository.LocalPath)"
    echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
  displayName: 'show variables and directory contents'

- task: Cache@2
  inputs:
    key: 'webnpm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
       npm | "$(Agent.OS)"
    path: $(web_npm_cache)
  displayName: Cache web npm

- script: |
    npm --cache "$(web_npm_cache)" ci
    BUILD_PATH="$(Build.ArtifactStagingDirectory)/web" npm run build
  displayName: 'Install and build web app'
  workingDirectory: "$(System.DefaultWorkingDirectory)/front_end"

- task: Cache@2
  inputs:
    key: 'servernpm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
       npm | "$(Agent.OS)"
    path: $(server_npm_cache)
  displayName: Cache server npm

- script: npm --cache "$(server_npm_cache)" ci
  displayName: 'Install server dependencies'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/node_modules'
    contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/node_modules'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    contents: 
      server.js
      package.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)'


- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: false
    archiveType: zip
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(archiveName)'

- script: ls '$(Build.ArtifactStagingDirectory)'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/$(archiveName)'
    artifactType: pipeline